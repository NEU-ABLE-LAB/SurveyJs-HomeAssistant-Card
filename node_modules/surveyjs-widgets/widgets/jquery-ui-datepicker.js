(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("widgets/jquery-ui-datepicker", [], factory);
	else if(typeof exports === 'object')
		exports["widgets/jquery-ui-datepicker"] = factory();
	else
		root["widgets/jquery-ui-datepicker"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/svg-inline-loader/index.js?classPrefix!./src/images/datepicker.svg":
/*!*****************************************************************************************!*\
  !*** ./node_modules/svg-inline-loader/index.js?classPrefix!./src/images/datepicker.svg ***!
  \*****************************************************************************************/
/***/ ((module) => {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><g><rect x=\"3\" y=\"7\" width=\"2\" height=\"2\"></rect><rect x=\"7\" y=\"11\" width=\"2\" height=\"2\"></rect><rect x=\"3\" y=\"11\" width=\"2\" height=\"2\"></rect><rect x=\"11\" y=\"11\" width=\"2\" height=\"2\"></rect><rect x=\"11\" y=\"7\" width=\"2\" height=\"2\"></rect><path d=\"M10,6H6v4h4V6z M9,9H7V7h2V9z\"></path><rect x=\"4\" width=\"1\" height=\"3\"></rect><rect x=\"11\" width=\"1\" height=\"3\"></rect><path d=\"M13,2v2h-3V2H6v2H3V2H0v14h16V2H13z M15,15H1V5h14V15z\"></path></g></svg>"

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*************************************!*\
  !*** ./src/jquery-ui-datepicker.js ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function init(Survey, $) {
  const iconId = "icon-datepicker";
  const componentName = "datepicker";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, __webpack_require__(/*! svg-inline-loader?classPrefix!./images/datepicker.svg */ "./node_modules/svg-inline-loader/index.js?classPrefix!./src/images/datepicker.svg"), "");
  $ = $ || window.$;
  if (
    !!$ &&
    !$.fn.bootstrapDP &&
    !!$.fn.datepicker &&
    !!$.fn.datepicker.noConflict
  ) {
    $.fn.bootstrapDP = $.fn.datepicker.noConflict();
    if (!$.fn.datepicker) {
      $.fn.datepicker = $.fn.bootstrapDP;
    }
  }
  var widget = {
    name: componentName,
    title: "Date picker",
    iconName: iconId,
    widgetIsLoaded: function () {
      return !!$ && !!$.fn.datepicker && !$.fn.datepicker.noConflict;
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate: "<input class='form-control widget-datepicker' type='text'>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "inputType", visible: false },
          { name: "inputFormat", visible: false },
          { name: "inputMask", visible: false },
        ],
        null,
        "text"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "dateFormat",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "config",
        category: "general",
        visible: false,
        default: null,
      });
      Survey.Serializer.addProperty(componentName, {
        name: "maxDate",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "minDate",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "disableInput:boolean",
        category: "general",
      });
    },
    afterRender: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      $el.addClass(question.css.text.root);
      var isSelecting = false;
      var config = $.extend(true, {}, question.config || {});
      if (!!question.placeHolder) {
        $el.attr("placeholder", question.placeHolder);
      }
      if (config.dateFormat === undefined) {
        config.dateFormat = !!question.dateFormat
          ? question.dateFormat
          : undefined;
      }
      if (config.option === undefined) {
        config.option = {
          minDate: null,
          maxDate: null,
        };
      }
      if (!!question.minDate) {
        config.minDate = question.minDate;
      }
      if (!!question.maxDate) {
        config.maxDate = question.maxDate;
      }
      if (!!question.renderedMin) {
        config.minDate = new Date(question.renderedMin);
      }
      if (!!question.renderedMax) {
        config.maxDate = new Date(question.renderedMax);
      }
      config.disabled = question.isReadOnly;
      if (config.onSelect === undefined) {
        config.onSelect = function (dateText) {
          isSelecting = true;
          setDateIntoQuestion();
          isSelecting = false;
          this.fixFocusIE = true;
        };
      }
      config.fixFocusIE = false;
      config.onClose = function (dateText, inst) {
        this.fixFocusIE = true;
      };
      config.beforeShow = function (input, inst) {
        var result = !!navigator.userAgent.match(/Trident\/7\./)
          ? !this.fixFocusIE
          : true;
        this.fixFocusIE = false;
        return result;
      };
      function setDateIntoQuestion() {
        var val = $el.datepicker('getDate');
        var d = new Date();
        val.setHours(d.getHours());
        val.setMinutes(d.getMinutes());
        val.setSeconds(d.getSeconds());
        question.value = val;
      }
      var pickerWidget = $el.datepicker(config).on("change", function (e) {
        setDateIntoQuestion();
      });

      $el.keyup(function (e) {
        if (e.keyCode == 8 || e.keyCode == 46) {
          $.datepicker._clearDate(this);
        }
      });
      if(question.disableInput) {
        $el.attr("readOnly", "true");
      }

      question.readOnlyChangedCallback = function () {
        $el.datepicker("option", "disabled", question.isReadOnly);
      };
      function updateDate() {
        if (!question.isEmpty()) {
          var val = question.value;
          if(typeof val === "string") {
            val = new Date(val);
          }
          pickerWidget.datepicker("setDate", val);
        } else {
          pickerWidget.datepicker("setDate", null);
        }
      }
      question.registerFunctionOnPropertyValueChanged(
        "dateFormat",
        function () {
          question.dateFormat &&
            pickerWidget.datepicker(
              "option",
              "dateFormat",
              question.dateFormat
            );
          updateDate();
        }
      );
      question.valueChangedCallback = function () {
        if (!isSelecting) {
          updateDate();
          $el.blur();
        }
      };
      question.valueChangedCallback();
    },
    willUnmount: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      $el.datepicker("destroy");
    },
    pdfQuestionType: "text",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,