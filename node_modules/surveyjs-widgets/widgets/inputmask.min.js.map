{"version":3,"file":"widgets/inputmask.min.js","mappings":"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","sources":["webpack://surveyjs-widgets/webpack/universalModuleDefinition","webpack://surveyjs-widgets/external umd {\"root\":\"Inputmask\",\"commonjs2\":\"inputmask\",\"commonjs\":\"inputmask\",\"amd\":\"inputmask\"}","webpack://surveyjs-widgets/webpack/bootstrap","webpack://surveyjs-widgets/webpack/runtime/compat get default export","webpack://surveyjs-widgets/webpack/runtime/define property getters","webpack://surveyjs-widgets/webpack/runtime/hasOwnProperty shorthand","webpack://surveyjs-widgets/webpack/runtime/make namespace object","webpack://surveyjs-widgets/./src/inputmask.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"inputmask\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widgets/inputmask\", [\"inputmask\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widgets/inputmask\"] = factory(require(\"inputmask\"));\n\telse\n\t\troot[\"widgets/inputmask\"] = factory(root[\"Inputmask\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__801__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__801__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Inputmask from \"inputmask\";\n\nfunction init(Survey) {\n  const updateTextItemPropInfo = function (propJSON) {\n    const name = propJSON.name;\n    propJSON.onGetValue = (obj) => {\n      return obj.editor[name];\n    };\n    propJSON.onSetValue = (obj, val) => {\n      obj.editor[name] = val;\n    }    \n  }\n  const updateColumnPropInfo = function (propJSON) {\n    const name = propJSON.name;\n    propJSON.visibleIf = (obj) => {\n      return obj.cellType === \"text\";\n    };\n    propJSON.onGetValue = (obj) => {\n      return obj.templateQuestion[name];\n    };\n    propJSON.onSetValue = (obj, val) => {\n      obj.templateQuestion[name] = val;\n    }    \n  }\n  var widget = {\n    name: \"maskedit\",\n    numericGroupSeparator: \",\",\n    numericRadixPoint: undefined,\n    numericAutoGroup: true,\n    numericDigits: 2,\n    numericDigitsOptional: false,\n    numericPlaceholder: \"0\",\n    autoUnmask: true,\n    clearIncomplete: true,\n    showMaskOnHover: true,\n    unmaskAsNumber: false,    \n    widgetIsLoaded: function () {\n      return typeof Inputmask != \"undefined\";\n    },\n    isFit: function (question) {\n      if (question.getType() == \"multipletext\") return true;\n      return (\n        question.getType() == \"text\" &&\n        (question.inputMask != \"none\" || question.inputFormat)\n      );\n    },\n    isDefaultRender: true,\n    activatedByChanged: function (activatedBy) {\n      if (Survey.Serializer.findProperty(\"text\", \"inputMask\")) return;\n      var properties = [\n        {\n          name: \"autoUnmask\",\n          type: \"boolean\",\n          category: \"general\",\n          showMode: \"form\",\n          default: true,\n        },\n        {\n          name: \"clearIncomplete\",\n          type: \"boolean\",\n          category: \"general\",\n          showMode: \"form\",\n          default: true,\n        },\n        {\n          name: \"showMaskOnHover\",\n          type: \"boolean\",\n          category: \"general\",\n          showMode: \"form\",\n          default: true,\n        },\n        { \n          name: \"inputFormat\", \n          showMode: \"form\",\n          category: \"general\" },\n        {\n          name: \"inputMask\",\n          showMode: \"form\",\n          category: \"general\",\n          default: \"none\",\n          choices: [\n            \"none\",\n            \"datetime\",\n            \"currency\",\n            \"decimal\",\n            \"email\",\n            \"phone\",\n            \"ip\",\n          ],\n        },\n        {\n          name: \"numericDigits\",\n          category: \"general\",\n          visible: false,\n        },\n        {\n          name: \"numericGroupSeparator\",\n          category: \"general\",\n          default: \",\",\n          visible: false,\n        },\n        {\n          name: \"options\",\n          category: \"general\",\n          visible: false,\n        },\n        {\n          name: \"unmaskAsNumber:boolean\",\n          category: \"general\",\n          visible: false,\n        },\n        {\n          name: \"prefix\",\n          category: \"general\",\n          visible: false,\n        },\n        {\n          name: \"suffix\",\n          category: \"general\",\n          visible: false,\n        },\n      ];\n      Survey.Serializer.addProperties(\"text\", properties);\n      properties.forEach(prop => {\n        if(prop.visible !== false) {\n          updateTextItemPropInfo(prop);\n        }\n      });\n      Survey.Serializer.addProperties(\"multipletextitem\", properties);\n      properties.forEach(prop => {\n        if(prop.visible !== false) {\n          updateColumnPropInfo(prop);\n        }\n      });\n    },\n    applyInputMask: function (surveyElement, el) {\n      var rootWidget = this;\n      var mask =\n        surveyElement.inputMask !== \"none\"\n          ? surveyElement.inputMask\n          : surveyElement.inputFormat;\n      var options = {};\n      if (typeof surveyElement.options === \"object\") {\n        for (var option in surveyElement.options) {\n          options[option] = surveyElement.options[option];\n        }\n      }\n      options.autoUnmask = typeof surveyElement.autoUnmask !== \"undefined\"\n        ? surveyElement.autoUnmask\n        : rootWidget.autoUnmask;\n      options.clearIncomplete = typeof surveyElement.clearIncomplete !== \"undefined\"\n        ? surveyElement.clearIncomplete\n        : rootWidget.clearIncomplete;\n      options.showMaskOnHover = typeof surveyElement.showMaskOnHover !== \"undefined\"\n        ? surveyElement.showMaskOnHover\n        : rootWidget.showMaskOnHover;\n      options.unmaskAsNumber = typeof surveyElement.unmaskAsNumber !== \"undefined\"\n          ? surveyElement.unmaskAsNumber\n          : rootWidget.unmaskAsNumber;\n      if (surveyElement.inputMask !== \"none\") {\n        options.inputFormat = surveyElement.inputFormat;\n      }\n      if (\n        surveyElement.inputMask === \"currency\" ||\n        surveyElement.inputMask === \"decimal\"\n      ) {\n        options.groupSeparator = surveyElement.numericGroupSeparator || rootWidget.numericGroupSeparator;\n        options.radixPoint = rootWidget.numericRadixPoint;\n        options.autoGroup = rootWidget.numericAutoGroup;\n        options.placeholder = rootWidget.numericPlaceholder;        \n      }\n      if (surveyElement.inputMask === \"currency\") {\n        options.digits = surveyElement.numericDigits || rootWidget.numericDigits;\n        options.digitsOptional = rootWidget.numericDigitsOptional;\n        options.prefix = surveyElement.prefix || \"\";\n        options.suffix = surveyElement.suffix || \"\";\n        options.placeholder = rootWidget.numericPlaceholder;        \n      }\n      // if (surveyElement.inputMask == \"datetime\") {\n      //   mask = surveyElement.inputFormat;\n      // }\n      if (surveyElement.inputMask === \"phone\" && !!surveyElement.inputFormat) {\n        mask = surveyElement.inputFormat;\n      }\n      Inputmask(mask, options).mask(el);\n\n      el.onblur = function () {\n        if (!el.inputmask) return;\n        if (surveyElement.value === el.inputmask.getemptymask()) {\n          surveyElement.value = \"\";\n        }\n      };\n\n      var customWidgetData =\n        surveyElement.getType() === \"multipletextitem\"\n          ? surveyElement.editorValue.customWidgetData\n          : surveyElement.customWidgetData;\n      el.oninput = function () {\n        customWidgetData.isNeedRender = true;\n      };\n\n      var pushValueHandler = function () {        \n        if (!el.inputmask) return;\n        if (el.inputmask.isComplete()) {\n          surveyElement.value = options.autoUnmask\n            ? el.inputmask.unmaskedvalue()\n            : el.value;\n        } else {\n          surveyElement.value = null;\n        }\n      };\n      el.onfocusout = el.onchange = pushValueHandler;\n\n      var updateHandler = function () {\n        el.value =\n          surveyElement.value === undefined || surveyElement.value === null\n            ? \"\"\n            : surveyElement.value;\n      };\n      surveyElement.valueChangedCallback = updateHandler;\n      updateHandler();\n    },\n    afterRender: function (question, el) {      \n      if (question.getType() != \"multipletext\") {\n        var input = el.querySelector(\"input\") || el;\n        this.applyInputMask(question, input);\n      } else {\n        for (var i = 0; i < question.items.length; i++) {\n          var item = question.items[i];\n          if (item.inputMask != \"none\" || item.inputFormat) {\n            var input = el.querySelector(\"#\" + item.editor.inputId);\n            if (input) {\n              this.applyInputMask(item, input);\n            }\n          }\n        }\n      }\n    },\n    willUnmount: function (question, el) {\n      var input = el.querySelector(\"input\") || el;\n      if (!!input && !!input.inputmask) {\n        input.inputmask.remove();\n      }\n    },\n  };\n\n  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);\n}\n\nif (typeof Survey !== \"undefined\") {\n  init(Survey);\n}\n\nexport default init;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__801__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","init","Survey","widget","name","numericGroupSeparator","numericRadixPoint","numericAutoGroup","numericDigits","numericDigitsOptional","numericPlaceholder","autoUnmask","clearIncomplete","showMaskOnHover","unmaskAsNumber","widgetIsLoaded","isFit","question","getType","inputMask","inputFormat","isDefaultRender","activatedByChanged","activatedBy","Serializer","findProperty","properties","type","category","showMode","default","choices","visible","addProperties","forEach","propJSON","onGetValue","editor","onSetValue","val","updateTextItemPropInfo","visibleIf","cellType","templateQuestion","updateColumnPropInfo","applyInputMask","surveyElement","el","rootWidget","this","mask","options","option","groupSeparator","radixPoint","autoGroup","placeholder","digits","digitsOptional","prefix","suffix","onblur","inputmask","getemptymask","customWidgetData","editorValue","oninput","isNeedRender","onfocusout","onchange","isComplete","unmaskedvalue","updateHandler","valueChangedCallback","afterRender","input","querySelector","i","items","length","item","inputId","willUnmount","remove","CustomWidgetCollection","Instance","addCustomWidget"],"sourceRoot":""}