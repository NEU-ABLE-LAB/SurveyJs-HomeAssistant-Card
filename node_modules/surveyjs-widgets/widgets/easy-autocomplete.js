(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("widgets/easy-autocomplete", [], factory);
	else if(typeof exports === 'object')
		exports["widgets/easy-autocomplete"] = factory();
	else
		root["widgets/easy-autocomplete"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************************!*\
  !*** ./src/easy-autocomplete.js ***!
  \**********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function init(Survey, $) {
  $ = $ || window.$;
  var widget = {
    name: "autocomplete",
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.easyAutocomplete;
    },
    isFit: function (question) {
      return question.getType() === "text";
    },
    isDefaultRender: true,
    activatedByChanged: function (activatedBy) {
      if (!!Survey.Serializer.findProperty("text", "choices") || !!Survey.Serializer.findProperty("text", "choicesByUrl")) return;
      Survey.Serializer.addProperty("text", {
        name: "choices:itemvalues",
        category: "choices",
        categoryIndex: 1,
      });
      Survey.Serializer.addProperty("text", {
        name: "choicesByUrl:restfull",
        className: "ChoicesRestfull",
        category: "choicesByUrl",
        visible: false,
        categoryIndex: 2,
      });
      Survey.Serializer.addProperty("text", {
        name: "config",
        category: "general",
        visible: false,
      });
    },
    afterRender: function (question, el) {
      var $el = $(el).is("input") ? $(el) : $(el).find("input");

      var getCssSelectorFromClassesString = function (classesString) {
        if (!classesString) return "";
        var cssSelector = classesString.replace(/(^\s*)|(\s+)/g, "."); // replace whitespaces with '.'
        return cssSelector;
      };

      var questionRootClasses = getCssSelectorFromClassesString(
        question.cssRoot
      );

      var questionRoot = $el.parents(questionRootClasses)[0];
      if (!!questionRootClasses && !!questionRoot) {
        questionRoot.style.overflow = "visible";
      }

      var config = question.config;
      var options =
        config && typeof config == "string" ? JSON.parse(config) : config;
      if (!options) options = {};

      options.data = (question.choices || []).map(function (item) {
        return item.text;
      });
      if (options.adjustWidth === undefined) {
        options.adjustWidth = false;
      }
      if (!options.list) {
        options.list = {
          sort: {
            enabled: true,
            method: (aStr, bStr) => {
              const inputStr = $el.val().toLowerCase();
              const aIndex = aStr.toLowerCase().indexOf(inputStr);
              const bIndex = bStr.toLowerCase().indexOf(inputStr);
              return aIndex - bIndex;
            }
          },
          match: {
            enabled: true,
          },
          onChooseEvent: function () {
            var selectedData = $el.getSelectedItemData();
            if(!!selectedData && typeof selectedData === "object" 
              && !!question.choicesByUrl && !!question.choicesByUrl.valueName) {
              selectedData = selectedData[question.choicesByUrl.valueName];
            }
            question.value = selectedData;
          },
        };
      }
      if (!options.placeholder) {
        options.placeholder = question.placeholder;
      }

      if (!!question.choicesByUrl) {
        options.url = function (phrase) {
          return question.choicesByUrl.url;
        };
        options.getValue = question.choicesByUrl.valueName;
        // options.ajaxSettings = {
        //   dataType: "jsonp"
        // };
      }
      $el.easyAutocomplete(options);

      $el[0].oninput = function () {
        question.customWidgetData.isNeedRender = true;
      };
      var updateHandler = function () {
        $el[0].value =
          typeof question.value === "undefined" ? "" : question.value;
      };
      question.valueChangedCallback = updateHandler;
      updateHandler();
    },
    willUnmount: function (question, el) {
      // var $el = $(el).find("input");
      // $el.autocomplete("destroy");
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,